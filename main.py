import os
import datetime
import pymssql
import telebot
from collections import deque
import time
from threading import Thread
from notifiers import get_notifier
from resources.conf_adm import tockenn
import resources.TI_base_smev as bs


# import subprocess

"""
–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–æ–Ω–æ–≤—ã–π —Ä–µ–∂–∏–º
–û—Ç–ª–∞–¥–∏—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∫ –∑–∞–ø—É—Å–∫—É –∏–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
"""
bot = telebot.TeleBot(tockenn)
telg = get_notifier('telegram')

history = deque([bs.get_smev_request_sending()], maxlen=2880)
times = deque([f'{datetime.datetime.now().hour}:{datetime.datetime.now().minute}'],
              maxlen=2880)
layout = dict(zip(map(ord, "qwertyuiop[]asdfghjkl;'zxcvbnm,./`"
                           'QWERTYUIOP{}ASDFGHJKL:"ZXCVBNM<>?~'),
                           "–π—Ü—É–∫–µ–Ω–≥—à—â–∑—Ö—ä—Ñ—ã–≤–∞–ø—Ä–æ–ª–¥–∂—ç—è—á—Å–º–∏—Ç—å–±—é.—ë"
                           '–ô–¶–£–ö–ï–ù–ì–®–©–ó–•–™–§–´–í–ê–ü–†–û–õ–î–ñ–≠–Ø–ß–°–ú–ò–¢–¨–ë–Æ,–Å'))
li = [1850516818]

def dat_hist(n):
    maxm = 35000
    check = 0
    while True:
        check += 1
        if check == 12:
            bs.set_graf(datetime.datetime.now().strftime("%d-%m-%Y %H:%M:%S"), bs.get_smev_request_sending())

            # –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –º–∞–ª–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ú–§–¶ –∑–∞—è–≤–æ–∫
            if datetime.datetime.now().strftime("%H:%M") == "09:30" and datetime.datetime.now().weekday() != 0:
                if bs.get_rep_pgu_mfc()["mfc_yest"] < 50 and bs.get_rep_pgu_mfc()["mfc_to"] < 150:
                    for i in bs.get_users():
                        telg.notify(token=tockenn, chat_id=i,
                                    message=f'–ó–∞—è–≤–æ–∫ —Å –ú–§–¶ –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å –º–∞–ª–æ, –æ—á–µ–Ω—å:\n{str(bs.get_rep_pgu_mfc()["mfc_yest"])}\n'
                                            f'–ó–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞—è–≤–æ–∫: {str(bs.get_rep_pgu_mfc()["mfc_to"])}')

            if datetime.datetime.now().strftime("%H:%M") == "16:45" and datetime.datetime.now().weekday() != 0:
                if bs.get_rep_pgu_mfc()["mfc_yest"] < 50 and bs.get_rep_pgu_mfc()["mfc_to"] < 150:
                    for i in bs.get_users():
                        telg.notify(token=tockenn, chat_id=i,
                                    message=f'–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –¥–Ω—è –∑–∞—è–≤–æ–∫ —Å –ú–§–¶ –æ—á–µ–Ω—å –º–∞–ª–æ:\n'
                                            f'–ó–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å: {str(bs.get_rep_pgu_mfc()["mfc_yest"])}\n'
                                            f'–ó–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞—è–≤–æ–∫: {str(bs.get_rep_pgu_mfc()["mfc_to"])}')
            check = 0

#–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–æ—Å—Ç–∏ –æ—á–µ—Ä–µ–¥–∏
        history.append(bs.get_smev_request_sending())
        times.append(
            f'{datetime.datetime.now().hour}:{datetime.datetime.now().minute}')
        if history[len(history) - 2] > maxm > history[len(history) - 3] and (history[len(history) - 2] < history[len(history) - 1] or history[len(history) - 1] > maxm):
            if datetime.datetime.now().strftime("%H:%M") < "22:00":
                for i in bs.get_users():
                    # process = subprocess.Popen("script.bat") #–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ —Ç–∏–ø–∞ bat
                    telg.notify(token=tockenn, chat_id=i, message=f'–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–π –¥–ª–∏–Ω—ã –æ—á–µ—Ä–µ–¥–∏. \n–ó–∞–ø—Ä–æ—Å—ã –≤ –æ—á–µ—Ä–µ–¥–∏: {str(bs.get_smev_request_sending())}')

        time.sleep(n)


def main_st():
    try:
        keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons_smev_ti = ["–°–ú–≠–í", "–°–≤–æ–¥–∫–∞", "–û—à–∏–±–∫–∏"]
        buttons_pgu_mfc = ["–ó–∞—è–≤–∫–∏ –∑–∞ –≤—á–µ—Ä–∞", "–ó–∞—è–≤–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è", "–ü—Ä–æ—á–µ–µ"]
        buttons_graf = ["–ì—Ä–∞—Ñ–∏–∫ üìâ","–ì–ò–° –§–†–ò/–ï–ì–† –ó–ê–ì–°"]
        but_help = '–ò–Ω—Ñ–æ ‚ùì'
        keyboard.add(*buttons_smev_ti)
        keyboard.add(*buttons_pgu_mfc)
        keyboard.add(*buttons_graf)
        keyboard.add(but_help)

        @bot.message_handler(commands=["start"])
        def big_start(m):
            bs.set_users(m.from_user.id)
            bot.send_message(m.chat.id,
                            '–î–æ–±—Ä—ã–π –¥–µ–Ω—å. –Ø —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ –¢–ò. –í—ã–±–µ—Ä–∏—Ç–µ –í–∏–¥ —Å–≤–µ–¥–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å.', reply_markup=keyboard)

        # @bot.message_handler(commands=["new"])
        # def update(message):
        #     for user in li:
        #         bot.send_message(user, '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ', reply_markup=keyboard)


        @bot.message_handler(content_types=['text'])
        def start(message):
            message.text = str(message.text).translate(layout)
            if message.text.lower() == '—Å–º—ç–≤' or message.text.lower() == '—Å–º–µ–≤':
                if bs.get_smev_wait_send() == 0:
                    bot.send_message(message.from_user.id, '–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞. –£—Ç–æ—á–Ω–∏—Ç–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.')
                else:
                    bot.send_message(message.from_user.id,
                                    f'–°–ú–≠–í –Ω–∞ –¢–ò\n–ó–∞–ø—Ä–æ—Å—ã, –æ–∂–∏–¥–∞—é—â–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(bs.get_smev_wait_send())}.\n–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –æ—Ç–ø—Ä–∞–≤–∫–µ: {str(bs.get_smev_request_sending())}')

            elif message.text.lower() == '–∑–∞—è–≤–∫–∏ –ø–≥—É.–º—Ñ—Ü.—Ñ—Ä–∏' or message.text.lower() == '–ø–≥—É' or message.text.lower() == '–º—Ñ—Ü' or message.text.lower() == '–≥–∏—Å' or message.text.lower() == '—Ñ—Ä–∏' or message.text.lower() == '–∑–∞—è–≤–∫–∏':
                yesterday = datetime.date.today() - datetime.timedelta(days=1)
                today = datetime.date.today()
                bot.send_message(message.from_user.id,
                                    f'–ó–∞ {(yesterday.strftime(f"%d {bs.month_list[yesterday.month - 1]} %Y"))}:\n'
                                    f'–ü–ì–£: {str(bs.get_yest()["pgu_yest"])}\n'
                                    f'–ú–§–¶: {str(bs.get_yest()["mfc_yest"])}\n'
                                    f'{"_"*30}\n'
                                    f'–í—Å–µ–≥–æ –Ω–∞ –¢–ò –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {str(bs.get_yest()["all_yest"])},\n'
                                    f'–∏–∑ –Ω–∏—Ö –≤ –ê–°–ü –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å: {str(bs.get_yest()["net_yest"])}')
                bot.send_message(message.from_user.id,
                                    f'–ó–∞ {(today.strftime(f"%d {bs.month_list[today.month - 1]} %Y"))}:\n'
                                    f'–ü–ì–£: {str(bs.get_to()["pgu_to"])}\n'
                                    f'–ú–§–¶: {str(bs.get_to()["mfc_to"])}\n'
                                    f'{"_"*30}\n'
                                    f'–í—Å–µ–≥–æ –Ω–∞ –¢–ò –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {str(bs.get_to()["all_to"])},\n'
                                    f'–∏–∑ –Ω–∏—Ö –≤ –ê–°–ü –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å: {str(bs.get_to()["net_to"])}')

            elif message.text.lower() == '–∑–∞—è–≤–∫–∏ –∑–∞ –≤—á–µ—Ä–∞' or message.text.lower() == '–∑–∞—è–≤–∫–∏ –ø–≥—É.–º—Ñ—Ü.—Ñ—Ä–∏ –∑–∞ –≤—á–µ—Ä–∞':
                yesterday = datetime.date.today() - datetime.timedelta(days=1)
                bot.send_message(message.from_user.id,
                                    f'–ó–∞ {(yesterday.strftime(f"%d {bs.month_list[yesterday.month - 1]} %Y"))}:\n'
                                    f'–ü–ì–£: {str(bs.get_yest()["pgu_yest"])}\n'
                                    f'–ú–§–¶: {str(bs.get_yest()["mfc_yest"])}\n'
                                    f'{"_"*30}\n'
                                    f'–í—Å–µ–≥–æ –Ω–∞ –¢–ò –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {str(bs.get_yest()["all_yest"])},\n'
                                    f'–∏–∑ –Ω–∏—Ö –≤ –ê–°–ü –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å: {str(bs.get_yest()["net_yest"])}')

            elif message.text.lower() == '–∑–∞—è–≤–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è' or message.text.lower() == '–∑–∞—è–≤–∫–∏ –ø–≥—É.–º—Ñ—Ü.—Ñ—Ä–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è':
                today = datetime.date.today()
                bot.send_message(message.from_user.id,
                                    f'–ó–∞ {(today.strftime(f"%d {bs.month_list[today.month - 1]} %Y"))}:\n'
                                    f'–ü–ì–£: {str(bs.get_to()["pgu_to"])}\n'
                                    f'–ú–§–¶: {str(bs.get_to()["mfc_to"])}\n'
                                    f'{"_"*30}\n'
                                    f'–í—Å–µ–≥–æ –Ω–∞ –¢–ò –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {str(bs.get_to()["all_to"])},\n'
                                    f'–∏–∑ –Ω–∏—Ö –≤ –ê–°–ü –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å: {str(bs.get_to()["net_to"])}')



            elif message.text.lower() == '–≥–∏—Å —Ñ—Ä–∏.–µ–≥—Ä –∑–∞–≥—Å' or message.text.lower() == '–µ–≥—Ä –∑–∞–≥—Å' or message.text.lower() == '–≥–∏—Å —Ñ—Ä–∏' or message.text.lower() == '–≥–∏—Å' or message.text.lower() == '—Ñ—Ä–∏' or message.text.lower() == '–µ–≥—Ä' or message.text.lower() == '–∑–∞–≥—Å' :
                yesterday = datetime.date.today() - datetime.timedelta(days=1)
                today = datetime.date.today()
                bot.send_message(message.from_user.id,
                                    f'–ó–∞ {(yesterday.strftime(f"%d {bs.month_list[yesterday.month - 1]} %Y"))}:\n'
                                    f'–ì–ò–° –§–†–ò: {str(bs.get_gis_zags()["gis_yest"])}\n'
                                    f'–ï–ì–† –ó–ê–ì–°: {str(bs.get_gis_zags()["zags_yest"])}\n'
                                    f'{"_"*30}\n'
                                    f'–ó–∞ {(today.strftime(f"%d {bs.month_list[today.month - 1]} %Y"))}:\n'
                                    f'–ì–ò–° –§–†–ò: {str(bs.get_gis_zags()["gis_to"])}\n'
                                    f'–ï–ì–† –ó–ê–ì–°: {str(bs.get_gis_zags()["zags_to"])}\n'
                                    f'{"_"*30}\n'
                                    f'–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:\n'
                                    f'–ì–ò–° –§–†–ò: {str(bs.get_gis_zags()["gis_week"])}\n'
                                    f'–ï–ì–† –ó–ê–ì–°: {str(bs.get_gis_zags()["zags_week"])}\n'
                                 )





            elif message.text.lower() == '—Å–≤–æ–¥–∫–∞':
                bot.send_message(message.from_user.id, f'–ó–∞–ø—Ä–æ—Å—ã, –∂–¥—É—â–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏:\n\n{str(bs.get_smev_report_full())}')
                if str(bs.get_smev_report()).count('DataFrame'):
                    bot.send_message(message.from_user.id, '–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.')
                else:
                    bot.send_message(message.from_user.id, f'–ò–∑ –Ω–∏—Ö –∑–∞–ø—Ä–æ—Å—ã, –Ω–∞—Ö–æ–¥—è—â–∏–µ—Å—è –≤ –æ—Ç–ø—Ä–∞–≤–∫–µ:\n\n{str(bs.get_smev_report())}')

            elif message.text.lower() == '–æ—à–∏–±–∫–∏':
                # bot.send_message(message.from_user.id, f'–û–ø–µ—Ä–∞—Ü–∏—è –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.')
                try:
                    # bot.send_message(message.from_user.id, f'–í—ã –º–æ–∂–µ')
                    keyboard = telebot.types.InlineKeyboardMarkup()
                    key_ful = telebot.types.InlineKeyboardButton(text='–í—Å–µ –æ—à–∏–±–∫–∏', callback_data='all')
                    key_slice = telebot.types.InlineKeyboardButton(text='–û—à–∏–±–∫–∏ –±–µ–∑ "–ª–µ—á–µ–Ω–∏—è"', callback_data='slice')
                    keyboard.add(key_ful)
                    keyboard.add(key_slice)
                    bot.send_message(message.from_user.id, text='–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å–ø–∏—Å–∫–∞ –æ—à–∏–±–æ–∫?', reply_markup=keyboard)
                except Exception as e:
                    bot.send_message(message.from_user.id, f'–û—à–∏–±–∫–∞ —Å–µ—Ä–≤—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –ø–∞—Ä—É –º–∏–Ω—É—Ç.({e})')

            elif message.text.lower() == '–ø—Ä–æ—á–µ–µ':
                bot.send_message(message.from_user.id,
                                f'–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫:  {str(bs.get_fil_count()["nbo_pgu"])}.\n'
                                f'–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è –ù–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø–æ —Ä–∞–π–æ–Ω–∞–º –∑–∞—è–≤–æ–∫:  {str(bs.get_fil_count()["dist_pgu"])}.\n'
                                f'–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π "–£–°–ó–ù" –∑–∞—è–≤–æ–∫:    {str(bs.get_fil_count()["uszn"])}.')

            elif message.text.lower() == '–≥—Ä–∞—Ñ–∏–∫' or message.text == '–ì—Ä–∞—Ñ–∏–∫ üìâ':
                bs.draw_graf()
                bot.send_photo(message.chat.id, photo=open('graf.png', 'rb'))
                os.remove('graf.png')

            elif message.text == '–ò–Ω—Ñ–æ ‚ùì' or message.text.lower() == '–∏–Ω—Ñ–æ' or message.text.lower() == '–∏':
                bot.send_message(message.from_user.id, bs.info())

            elif message.text.lower() == '–ø—Ä–∏–≤–µ—Ç' or message.text.lower() == '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π' or message.text.lower() == '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ':
                bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAJfil-7g5saK6caYV8CsqELuWLynDH2AALiBgACOtEHAAFgVDNflxcX6h4E')
                bot.send_message(message.from_user.id, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ. –ö–∞–∫ —è –º–æ–≥—É –∫ –í–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?")
                bot.register_next_step_handler(message, get_name)

            else:
                if bs.answer(message.text.lower()) is not None:
                    bot.send_message(message.from_user.id, f'{str(bs.answer(message.text.lower()))}')
                else:
                    bot.send_message(message.from_user.id,
                                    f'–Ø –µ—â–µ —Å–æ–≤—Å–µ–º –º–∞–ª–µ–Ω—å–∫–∏–π –∏ —Ç–æ–ª—å–∫–æ —É—á—É—Å—å. \n'
                                    f'–Ø –∑–∞–ø–æ–º–Ω—é –í–∞—à –≤–æ–ø—Ä–æ—Å –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á—É –Ω–∞ –Ω–µ–≥–æ –ø–æ–∑–∂–µ. –ê –ø–æ–∫–∞, –ø—Ä–µ–¥–ª–∞–≥–∞—é –ø–æ—á–∏—Ç–∞—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å, –¥–ª—è –ø–æ–¥–Ω—è—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è ‚ò∫\n\n'
                                    f'{str(bs.other())}')
                    bs.set_question(message.text)

        def get_name(message):
            global name
            name = message.text
            bs.up_users(message.from_user.id, name)
            bot.send_message(message.from_user.id, f'–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è, {name}. –Ø –í–∞—Å –∑–∞–ø–æ–º–Ω–∏–ª üòà')
    except Exception as e:
        print(f'–û—à–∏–±–∫–∞ - {e}')

    @bot.callback_query_handler(func=lambda call: True)
    def callback_worker(call):
        if call.data == "all":
            try:
                bot.send_message(call.message.chat.id, '–§–∞–π–ª —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.')
                bot.send_sticker(call.message.chat.id, 'CAACAgIAAxkBAAEGQwtjX45RB3O9j-troQS5R_i2S2kbVQAClgoAAmXXSEqeC5Vjb_xP4CoE')
                bs.get_smev_err()
                file = open('–°–±–æ–∏.xlsx', 'rb')
                bot.send_animation(call.message.chat.id, file)
                file.close()
                os.remove('–°–±–æ–∏.xlsx')
            except Exception as e:
                bot.send_message(call.message.chat.id, f'–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –ø–∞—Ä—É –º–∏–Ω—É—Ç.({e})')
        if call.data == "slice":
            try:
                bot.send_message(call.message.chat.id, '–§–∞–π–ª —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.')
                bot.send_sticker(call.message.chat.id, 'CAACAgIAAxkBAAEGQw1jX45XoJeLQIcxLoIDyW2FTPgZ_wACIwADKA9qFCdRJeeMIKQGKgQ')
                bs.get_smev_err_heal()
                file = open('–°–±–æ–∏.xlsx', 'rb')
                bot.send_document(call.message.chat.id, file)
                file.close()
                os.remove('–°–±–æ–∏.xlsx')
            except pymssql._pymssql.OperationalError as e:
                bot.send_message(call.message.chat.id,
                                 '–ó–∞–ø—Ä–æ—Å –ø–∞–ª –∂–µ—Ä—Ç–≤–æ–π —Ä–µ–ø—Ä–µ—Å—Å–∏–π –≤ —É–≥–æ–¥—É –ë–î. –ü–æ–º—è–Ω–µ–º...')
                bot.send_sticker(call.message.chat.id,
                                 'CAACAgIAAxkBAAEF8Z9jM-XK_HHjbju6ND0Dw8fX_1HoRgACcxMAAtjY4QAB-R-zLyXpPuEqBA')
                print(e)
            except Exception as e:
                bot.send_message(call.message.chat.id, f'–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –ø–∞—Ä—É –º–∏–Ω—É—Ç.({e})')



    if __name__ == '__main__':
        while True:
            try:
                bot.polling(none_stop=True, interval=0)
            except Exception as e:
                time.sleep(3)
                print(f'{datetime.datetime.now()} –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ {e}')



t1 = Thread(target=dat_hist, args=(5,))
t2 = Thread(target=main_st)

t1.start()
t2.start()
t1.join()
t2.join()
